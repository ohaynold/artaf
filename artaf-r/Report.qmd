---
title: "Autoregressive Behavior of Aviation Weather Forecasts"
author:
- Oliver M. Haynold
- Neal Ylitalo
date: "`r Sys.Date()`"
output: pdf_document
keep_tex: true
header-includes:
   - \usepackage{booktabs}
   - \usepackage{lipsum}
   - \usepackage{fancyhdr}
   - \pagestyle{fancy}
   - \renewcommand{\headrulewidth}{0pt} 
   - \fancyhead[L]{}
   - \fancyhead[R]{DOI 10.5281/zenodo.14954569}
format:
  pdf:
    fig-width: 7
    fig-height: 4.5
crossref:
  fig-title: Figure
  fig-prefix: Figure
  fig-labels: arabic
  appendix-title: "Appendix:"
  appendix-delim: ":"
  sec-prefix: ""
toc: true
lof: true
lot: true
number-sections: true
number-depth: 3
font-size: 10
params:
  data_set: "full_set"
tbl-cap-location: bottom
bibliography: bibliography.bibtex
copyright:
  holder: Oliver M. Haynold & Neal Ylitalo
  year: 2025
license:
    text: This work is licensed under CC BY 4.0.
    type: open-access
    url: https://creativecommons.org/licenses/by/4.0/
editor: 
  markdown: 
    wrap: 72
abstract: >
   We analyze U.S. Terminal Aerodrome Forecasts (TAFs) for autocorrelation of changes
   in forecasts for a given aerodrome and hour between successive forecasts.
   We find a pessimistic and overreacting bias. When forecasters adjust a TAF,
   they tend to back out some of their changes in a later TAF. This tendency is
   much more pronounced when forecasters worsen a forecast than when they improve it.
keywords:
  - "terminal aerodrome forecasts"
  - "weather forecasting accuracy"
  - "meteorological biases"
  - "wet bias"
  - "forecast revisions"
citation:
  doi: "10.5281/zenodo.14954569"
---

```{r setup, include=FALSE}
library(spatstat)
library(readr)
library(dplyr)
library(ggplot2)
library(usmap)
library(palettes)
library(knitr)
library(tidyr)
library(broom)

# renv::snapshot()

knitr::opts_chunk$set(echo = FALSE)
```

\fancyhead[L]{`r if(params$data_set!="full_set"){paste("\\textbf{Incomplete data set ", knitr:::escape_latex(params$data_set), "}", sep="")}`}

{{< pagebreak >}}
 
Copyright Â© {{<meta copyright.year>}} by  {{<meta copyright.holder>}}. 

{{<meta license.text>}} The full license is available at [{{<meta license.url>}}]({{<meta license.url>}}).

This paper and the program code that makes it were written for the CAS 502: Fundamentals of Complex Systems Science: Computation
course at Arizona State University in the spring semester 2025.

```{r load_data}
lines <- read_csv(file.path("../data/histograms/",params$data_set ,"/hist YearlyStations.csv.zip"),
                  col_types = cols(
                    aerodrome = "f",
                    year="i",
                    variable="f",
                    previous="n",
                    current="n",
                    final="n",
                    count="i"
                  ))

processing_stats <- read_csv(file.path("../data/histograms/",params$data_set ,"/processing_stats.csv"),
                  col_types = cols(
                    statistic = "f",
                    value="i",
                  ))

stations <- read_csv("../config/stations.csv", 
                     col_types = cols(
                       station = "f",
                       name = "c",
                       latitude = "n",
                       longitude = "n",
                       center = "f"
                     )) %>%
              rename(aerodrome=station) %>%
              select(-center)
```

{{< pagebreak >}}

Pilots rely on Terminal Aerodrome Forecasts or TAFs published typically
every six hours for about 700 airports in the United States.[@ac0045H;
@fcmh12019] Although these forecasts rely on computer models, they still
involve significant human judgment and are prepared by meteorologists.
In the verbal discussions accompanying the formal forecasts, the
meteorologists sometimes make mention of "not yet" including or changing
something they foresee since they're not certain enough yet to find
doing so worthwhile.

We want to see if we can find evidence of the meteorologists being too
conservative or too aggressive in incorporating new information as it
becomes available. That is to say, we'd like to see whether there is
autoregressive behavior in changes of the forecast for the same
parameter at the same time and place. Put simply, if the meteorologist
makes his forecast worse than it was, is that reason to believe he'll
make it even worse in the next update? (*E.g.*, if in the evening before
I want to go flying, the forecast for 9 AM the next morning goes from a
cloud base of 5,000 ft to 4,000 ft, is that reason to assume that by the
morning, the forecast will be 3,000 ft, in which case I'll probably stay
home?)

# Research Problem

Research in psychology, financial markets, behavioral economics, and
related field has created an abundance of evidence that humans do not
tend to update their forecasts of future events with optimal efficiency
in the sense of a Bayesian update. However, the direction of these biases
appears inconsistent. The literature provides ample evidence
for humans being too conservative in their updates, *i.e.,* not taking
new information fully into account, and well as for being too aggressive
in their updates. [@ward1968; @griffin1992; @barberis1998;
@kahneman1973; @debondt1985; @daniel1998] We can define an efficent
forecast as one that takes into account all information available at the
time the forecast is made. [@nordhaus1987; @coibion2012] If a forecast
is efficient in this sense, there is no additional information to be
gleaned from looking a previous forecasts made for the same event by the
same forecaster.

While forecast biases have often been discussed in a context of alleged
irrationality by the forecasters, we should note that there are
perfectly plausible rational reasons for making biased forecasts. In the
case of weather forecasts for dissemination to the general public, there
is a well-documented "wet bias" toward predicting rain. [@bickel2008] This
bias can be quite drastic, such as with predictions of a 20% chance of
rain only materializing in about 5% of cases. [@silver2012] One can
easily hypothesize a plausible reason for such bias in what in
quantiative finance would be called the pricing kernel, *i.e.,* an
adjustment to weights in the probability space according to the
unpleasantry of the event. Consumers of the weather report may be
unhappier about getting wet because it rains and they did not take an
umbrella than they are about taking an umbrella needlessly.
Consequently, they may get unhappier at the weather forecaster for a
false forecast of dry weather than they get at a false forecast of rain.
If this is so, the forecaster may well advance consumer happiness and
thus his career by exhibiting a bias for forecasting rain.

Studies on weather forecast biases have typically focused on biases in the 
forecasts themselves rather than in their updates. However, one can easily 
hypothesize similar incentives for biases in forecast updates. For example, 
if consumers of a forecast are unhappy about the
forecast changing often, it may be a wise career move for the forecaster
only to update his forecast once he is reasonably sure that he will not
have to revise it back.

If forecasters are too aggressive or too conservative in updating
forecasts, we should expect to see serial autocorrelations in the
changes to their forecasts for the same event made over time. For
example, if a forecast gets updated from 10 knots of wind to 15 knots,
then if the forecaster is conservative, we might expect to see the next
forecast for the same place and time to go to 17 knots. Conversely, if
the forecaster is too aggressive in his updates, we might expect the
next forecast, as the forecast period draws nearer and more information
gets revealed, to update his forecast back to 13 knots.

It would also seem plausible for the forecaster to exhibit different
degrees of conservatism and aggression in updating forecasts with good
news and bad news. We may call a bias that is overresponds to bad news
and underresponds to good news pessimistic; conversely, we may call a
bias that underresponds to bad news and overresponds to good news
optimistic. Of course, this classification only makes sense if updates
to the forecast can reasonably be classified as being good news or bad
news. Since there is a danger of confusion between 'conservatism' in the
sense of being loathe to make an update and in the sense of being
cautious and pessimistic, from here on we will use the terms
'underresponding' for what the literature usually calls 'conservative'
and 'overresponding' for the opposite.

We can then write down a matrix of four possible stylized biases in
responding to changes in available information for a forecast where
those changes can be classified as good or bad:

|   | Overresponding to good news | Underresponding to good news |
|------------------------|------------------------|-------------------------|
| Overresponding to bad news | Overresponding | Pessimistic |
| Underresponding to bad news | Optimistic | Underresponding |

: Stylized biases of forecasts updates {#tbl-stylized-biases}

Our research question then becomes: Can we find evidence of bias in changes to Terminal Aerodrome Forecasts
that manifest in autocorrelation of these changes for the same time and place? If so, which of our
stylized biases does this bias belong to? Does the answer change for different variables? Does the answer change over time?

If should be noted that our question as posed does not directly answer anything about whether
the forecasts of the TAFs come true. That would require looking at actual weather
realizations, such as reported in METARs. We can thus not distinguish how autocorrelative bias
in TAFs, if any, relates to the eventual realizations. Forecasters could, for example,
be loath to include weather changes they have not previously forecast in a TAF, even if
they are already reported in the METAR (and some pilots would claim anecdotal evidence
for this to be true). We merely can show whether knowledge of the history of the TAF predictions
for a given time and place adds any information to what the final TAF prediction will likely
look like, whether or not that actually corresponds to the weather realization.

# Analysis

The software used to download, parse, process, and analyze the TAFs and generate this article
is available at [DOI 10.5281/zenodo.14954562](https://doi.org/10.5281/zenodo.14954562).

## Data acquisition
We ran our analysis for the `r sprintf("%d", dim(stations)[1])` aerodromes for which the National Weather Service
published TAFs at the end of 2024. We built a downloader to obtain these TAFs from the archive at [Iowa State University's Iowa Environmental Mesonet](https://mesonet.agron.iastate.edu/) and made a data set from 1997 through 2024 available at [DOI 10.5281/zenodo.14954564](https://doi.org/10.5281/zenodo.14954564).The United States changed its TAF format as well as the forecast range on 5 November 2008. [@sc0846] In order to avoid a break in our data set from this change, we limit our analysis to the years from 2010 through 2024.

We parsed `r format(processing_stats$value[processing_stats$statistic=="tafs_processed"], big.mark=",")` TAFs and encountered
`r format(processing_stats$value[processing_stats$statistic=="errors"], big.mark=",")` errors. By the structure of our error reporting, one TAF
may generate more than one error. Inspection of the error logs of unparsable
TAFs shows that the problems are indeed with the TAFs. With an error rate this low, we did not attempt to engage in any further cleanup
of TAFs with syntax errors and felt it safer to exclude these from our analysis.

We also did not consider TEMPO and PROB elements in TAFs. PROB groups are not used for the first nine hours of a forecast, and after that
only for thunderstorm events. [@ac0045H] This rule may introduce some reversionary tendencies since the PROB group has to disappear once it moves into
the first nine hours, and since the PROB group is only used as a PROB30, it should more often than not be resolved into being taken out of
the forecast. TEMPO groups are for events that cover less than half of their forecast period and for less than one hour. Since we structured our
analysis in hourly intervals, we felt it safest to leave them out as well.

## Variables considered

For our analyses, we parsed the TAFs we obtained and looked at the most pertient (semi-)continous variables for flight/no flight decisions:

Wind speed without gusts
: in knots

Wind speed with gusts
: in knots, the gust speed if given, otherwise the wind speed

Gust spread
: in knots


Wind speed directional
: in knots, the northerly and easterly components of the wind speed

Lowest cloud layer
: in feet, the lowest cloud layer of any extent, taking clear skies at 18,000 feet

Ceiling
: in feet, the lowest cloud layer that is at least broken, taking clear skies at 18,000 feet

Visibility
: in statute miles, with a maximum value of 6 miles for unobstructed visibility

Other variables may certainly be of importance, including binary ones like the forecast presence of thunderstorms, but we hope that these continuous variables will gives us a good data set from which
to analyze biases in forecast changes.

We show a detailed analysis of those data, both cross-sectional and autocorrelations of changes, in their original units in section @sec-detailed_data_analysis. 

## Quality transformation

In order to evaluate for optimistic and pessimistic biases, we need to say what is a good or a bad
value for the variables in question. What different flight operations consider acceptable depends, of course,
on factors such as the aircraft involved, whether the flight is conducted under visual or instrument flight rules, terrain, the alignment of available runways against the wind, *etc.* Goodness of a variable also
need not be a monotonic function of its value. For example, some headwind is advantageous for a takeoff or
landing. However, crosswinds and tailwinds are not. For simplicity, we treat the goodness of wind as monotonic
and say that less wind is better. For cloud layers and visibility, larger distances are, of course, better, so
for these variables it's easy.

We then transform our variables by sigmoid curves as follows:

```{r goodness_functions}
wind_goodness<- function(wind_speed) { 
  (1 - 1 / (1 + exp(-0.25 * (wind_speed - 15)))) / (1 - 1 / (1 + exp(-0.25 * (0 - 15)))) 
  } 
gust_goodness<- function(gust_spread) { 
  (1 - 1 / (1 + exp(-0.3 * (gust_spread - 8)))) / (1 - 1 / (1 + exp(-0.3 * (0 - 8)))) 
  } 
cloud_goodness<- function(altitude) { 
  ((1 / (1 + exp(-0.1 * (sqrt(altitude) - 40)))) - (1 / (1 + exp(-0.1 * (0 - 40))))) /  ((1 / (1 + exp(-0.1 * (sqrt(18000) - 40)))) - (1 / (1 + exp(-0.1 * (0 - 40)))))
  } 
visibility_goodness<- function(miles) { 
   ((1 / (1 + exp(-1 * (sqrt(miles) - 1.7)))) - (1 / (1 + exp(-1 * (0 - 1.7))))) /  ((1 / (1 + exp(-1 * (sqrt(6) - 1.7)))) - (1 / (1 + exp(-1 * (0 - 1.7)))))
  } 
```


Wind speed, with and without gusts:
: Goodness of 
  `r sprintf("%.2f", wind_goodness(0))` for calm wind,
  `r sprintf("%.2f", wind_goodness(10))` for 10 knots, 
  `r sprintf("%.2f", wind_goodness(20))` for 20 knots, 
  `r sprintf("%.2f", wind_goodness(30))` for 30 knots, 
  0 for infinite wind.

Gust spread:
: Goodness of 
  `r sprintf("%.2f", gust_goodness(0))` for no gusts,
  `r sprintf("%.2f", gust_goodness(5))` for 5 knots gust spread, 
  `r sprintf("%.2f", gust_goodness(10))` for 10 knots gust spread, 
  `r sprintf("%.2f", gust_goodness(15))` for 15 knots gust spread, 
  0 for infinite gust spread.


Cloud layers, lowest and ceiling
: We apply the sigmoid curve to the square root of the layer's base altitude, giving a goodness of
  `r sprintf("%.2f", cloud_goodness(0))` for clouds to the ground,
  `r sprintf("%.2f", cloud_goodness(500))` for clouds at 500 feet, 
  `r sprintf("%.2f", cloud_goodness(1000))` for clouds at 1000 feet,
  `r sprintf("%.2f", cloud_goodness(3000))` for clouds at 3000 feet, and
  `r sprintf("%.2f", cloud_goodness(18000))` for clear skies.

Visibility
: We apply the sigmoid curve to the square root of visibility, giving a goodness of
  `r sprintf("%.2f", cloud_goodness(0))` for no visibility,
  `r sprintf("%.2f", visibility_goodness(0.5))` for 0.5 statute miles, 
  `r sprintf("%.2f", visibility_goodness(1))` for 1 statute mile, 
  `r sprintf("%.2f", visibility_goodness(3))` for 3 statute miles, and
  `r sprintf("%.2f", visibility_goodness(6))` for unlimited visibility. 


```{r goodness_transform}
lines_goodness <- bind_rows(
  lines %>%
    filter(variable %in% c("wind_speed", "wind_speed_with_gust")) %>%
    mutate(previous = wind_goodness(previous),
           current = wind_goodness(current),
           final = wind_goodness(final)),
  lines %>%
    filter(variable %in% c("wind_gust_spread")) %>%
    mutate(previous = gust_goodness(previous),
           current = gust_goodness(current),
           final = gust_goodness(final)),
  lines %>%
    filter(variable %in% c("clouds_ceiling", "clouds_lowest_base")) %>%
    mutate(previous = cloud_goodness(previous),
           current = cloud_goodness(current),
           final = cloud_goodness(final)),
  lines %>%
    filter(variable %in% c("visibility")) %>%
    mutate(previous = visibility_goodness(previous),
           current = visibility_goodness(current),
           final = visibility_goodness(final))
)
```

## First differences

We divide each TAF into hourly predictions for its prediction range. This will give us for each
aerodrome and each hour a number of predictions. For all but the first and last of these predictions, we
form triplets for each variables comprising the previously predicted value, the currently predicted value,
and the value of the prediction in the final TAF issued for the hour in question.

We then take first differences as the change from the previous TAF to the current TAF as well as for the
change from the current TAF to the final TAF issued. The correlations between these first differences
will inform us of the autocorrelations in changes of TAF predictions for the variables in questions,
transformed into goodness values to make them comparable.

Overall, this gives us `r format(sum(lines_goodness$count[lines_goodness$variable=="wind_speed"]), big.mark=",")`
observations of pair of changes in TAFs for a given hour for each variable, or `r format(sum(lines_goodness$count), big.mark=",")`
pairs of changes overall. Since most predictions span more than an hour, these observations are not independent
(and, of course, even when the prediction changes between two
hours change, the predictions for these hours come out of the same forecasting process). Over all variables,
`r format(sum(lines_goodness$count[lines_goodness$current!=lines_goodness$previous]), big.mark=",")` records
involve a non-zero change between the previous prediction and the current prediction.

{{< pagebreak >}}


# Results

We can now examine the changes in the TAFs.

```{r plot_changes_goodness, warning=FALSE}
#| fig-cap: Autocorrelation of changes in predicted goodness of weather conditions

# geom_boxplot gets unhappy about large datasets, so we presummarize
changes_goodness_hist <- lines_goodness %>%
  mutate(change_from_previous = round(current - previous,1),
         change_to_final = final - current) %>%
  group_by(variable, change_from_previous, change_to_final) %>%
  summarise(count = sum(count), .groups = "drop")
  

print(
  ggplot(changes_goodness_hist, aes(x=factor(round(change_from_previous*10,0)/10, levels=(-10:10)/10), y=change_to_final, weight=count)) +
    geom_boxplot(outliers = FALSE) +
    theme_bw() +
    labs(
      title="Changes in Predicted Goodness vs. Final",
      x="Change in predicted goodness from previous forecast",
         y="Change to final forecast") +
    geom_abline(slope=-0.1, intercept=1.1, linetype=4) +
    scale_x_discrete(breaks=c(-1,-0.5,0,0.5,1), drop=FALSE) +
    facet_wrap(~variable)
)


```

We can see that there is clearly a reversionary tendency in changes in TAFs, *i.e.*, if forecasters
make a change to a TAF, they tend to overrespond to new information. As a first approximation, the
second and third quantiles of the changes seem to fall between the change remaining as is in the final TAF
and the change getting fully backed out in the final TAF.

The autocorrelations appear asymmetric, however. With the exception of the lowest cloud base, the tendency of
overreaction appears much stronger for worsening predictions than for improving ones. We can quantify this
by a regression of the change to final against the change from the previous prediction:

{{< pagebreak >}}

```{r reversion_goodness_coefficients}
#| tbl-cap: Coefficients of reversion of changes in predicted goodness by variable

correl_changes_goodness <- lines_goodness %>%
  mutate(change_from_previous = current - previous,
         change_to_final = final - current) %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  group_by(variable, change_increase, change_decrease, change_to_final) %>%
  summarise(count=sum(count), .groups = "drop") %>%
  nest_by(variable) %>%
  mutate(fitVariable = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitVariable))

correl_changes_goodness_display <- correl_changes_goodness %>%
  mutate(reversion=-estimate) %>%
  select(variable,term,reversion) %>%
  pivot_wider(names_from = term, values_from = reversion)

colnames(correl_changes_goodness_display) <- c("Variable", "Reversion of improvements", "Reversion of deteriorations")

kable(correl_changes_goodness_display, digits = 2)
```

We can thus say that the changes in predictions exhibit a mixture of a pessimistc and an overreacting
bias. Forecasters overreact when they adjust forecasts, but while they overreact strongly for
worsening predictions, they overreact more mildly for improving predictions. For visibility this is
so much so that we can expect improvements in prediction to last essentially unchanged into the final
TAF. The base of the lowest cloud layer may be an exception to this rule where forecasters are less
pessimistic than for other variables since this variable has less importance for aviation by instrument
flight rules (or for bold aviation by visual flight rules).

If forecast biases are unintentional, one often sees them reduce over time. If they are intentional and
serve a purpose, however, they may persist over time, even as users become conscious of them and computer
models improve. We can thus look at the development of reversionary tendencies in changes to TAFs over time:

```{r reversion_goodness_time}

correl_changes_goodness_year <- lines_goodness %>%
  mutate(change_from_previous = current - previous,
         change_to_final = final - current) %>%
  group_by(year, variable, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(year, variable) %>%
  mutate(fitVariable = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitVariable))

print(
  ggplot(correl_changes_goodness_year, aes(x=year,y=-estimate, colour=variable)) +
    geom_line() +
    facet_wrap(~term) +
    theme_bw() +
    scale_y_continuous(limits=c(0,1)) +
    labs("Change in TAF Reversion over Time", x="", y="Reversion coefficient")
)

```
It appears that the reversionary tendencies of forecasts remain largely unchanged. This suggests
that they may be an intentional behavior by forecasters, not an artifact of computer models or
unintentional bias.

We may finally ask whether reversionary tendencies might be more pronounced at certain places than
others. For worsening predictions, we see some tendencies that might be explained by different
weather patterns, but also some where that is at first glance hard to believe. In particular, there is
a curious effect that worsening predictions in Wyoming seem to be significantly less likely to get
reversed than in Montana or Colorado.

```{r reversion_goodness_decrease_place}
#| fig-cap: Reversion of worsened forecasts by aerodrome
#| fig-width: 5
#| fig-height: 3

correl_changes_goodness_aerodrome <- lines_goodness %>%
  mutate(change_from_previous = current - previous,
         change_to_final = final - current) %>%
  group_by(aerodrome, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(aerodrome) %>%
  mutate(fitVariable = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitVariable))  %>%
  left_join(stations, by=c("aerodrome")) %>%
  filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(correl_changes_goodness_aerodrome %>% filter(term=="change_decrease"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Worsened Forecasts by Aerodrome", colour="Reversion")
```
For reversions of improvements in predictions, a cluster of optimism around Boston stands out where
improvements in predictions are much more likely to get reversed than in New York City:

```{r reversion_goodness_increase_place}
#| fig-cap: Reversion of improved forecasts by aerodrome
#| fig-width: 5
#| fig-height: 3

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(correl_changes_goodness_aerodrome %>% filter(term=="change_increase"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Improved Forecasts by Aerodrome", colour="Reversion")
```
# Conclusion

It appears that there is indeed autocorrelation in changes to TAFs. Hence, a pilot can glean additional information by not looking only at the most current TAF for the time and place he wants to fly, but also
at previously issues TAFs for the same time and place. If the prediction worsened, there is grounds for hope
that this worsening will be reversed in the final TAF before he goes flying. If the prediction improved,
there is grounds for hope that the improvement will hold.

While TAFs have some power of their own, in particular with respect to flights under instruments rules being
allowed to take off, what matters most, of course, is not what the final TAF issued for a place and time looks
like, but how the weather actually turned out. From the interesting patterns we have seen in the evolution
of the forecasts, the relationship between that evolution and eventual weather realizations might be a fertile field for another study.

{{< pagebreak >}}

# Detailed Data Analysis {#sec-detailed_data_analysis .appendix}

## Wind speed without gusts

### Summary statistics

```{r load_wind_speed}
  wind_speed_hist <- lines %>% 
      filter(variable=="wind_speed") %>%
      group_by(current) %>%
      summarize(count=sum(count)) %>%
      ungroup()
```

##### Histogram

Wind speeds are forecast at an average of
`r sprintf("%.1f", weighted.mean(wind_speed_hist$current, wind_speed_hist$count))`
knots.

```{r wind_speed_hist}
#| fig-cap: Histogram of wind speeds
 print(
   ggplot(wind_speed_hist, aes(x=current)) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Wind Speeds", x="Wind speed, knots", y="Count") +
     coord_cartesian(xlim=c(0,50)) +
     theme_bw()
   )
```

{{< pagebreak >}}

##### Extreme values

For wind speeds exceeding 10 knots, we see an exponential decay in their
frequency of being forecast, albeit with a distinct clustering around
round numbers. However, that relationship breaks down for the very small
number of predictions exceeding 50 knots.

```{r wind_speed_hist_log, warning=FALSE}
#| fig-cap: Histogram of wind speeds, log scale
# Warning for zero counts giving negative infinity suppressed
 print(
   ggplot(wind_speed_hist %>% filter(current >= 10), aes(x=current)) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Wind Speeds", x="Wind Speed, knots", y="Count") +
     scale_y_log10() +
     theme_bw()
   )
```

{{< pagebreak >}}

##### By aerodrome

We see the well-known wind corridor from the Dakotas to West Texas:

```{r wind_speed_map}
#| fig-cap: Average wind forecast speed by aerodrome
wind_speed_avg <- lines %>% 
      filter(variable=="wind_speed") %>%
      group_by(aerodrome) %>%
      summarize(current=weighted.mean(current, count)) %>%
      ungroup() %>%
      left_join(stations, by=c("aerodrome")) %>%
      filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_speed_avg, input_names = c("longitude", "latitude")),
             aes(colour=current)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Average Wind Forecast Speed by Aerodrome", colour="Knots")
```

The windiest airports, by prediction, are:

```{r wind_speed_max_stations}
#| tbl-cap: Aerodromes with the highest predicted average wind speeds
kable(head(
  wind_speed_avg %>% 
  arrange(-current) %>% 
  rename(average_wind = current) %>% 
  select(aerodrome, name, average_wind)),
  col.names = c("Aerodrome", "Name", "Average wind, kts"),
  digits = 1)
```

{{< pagebreak >}} 

### Autocorrelation

##### Overall

Reductions in predicted wind speeds do not tend to get revised, but
increases mostly get revised:

```{r wind_speed_autocorr, warning=FALSE}
#| fig-cap: Changes in predicted wind speed *vs.* final prediction
wind_speed_autocorr <- lines %>%
  filter(variable=="wind_speed") %>%
  filter(previous <= 30, current <= 30, final <= 30) %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(wind_speed_autocorr, aes(x=factor(change_from_previous, levels=-30:30), y=change_to_final, weight=count)) +
    geom_boxplot() +
    theme_bw() +
    labs(
      title="Changes in Predicted Wind Speed vs. Final Prediction",
      x="Change in predicted wind speed, knots",
         y="Change from prediction to final prediction, knots") +
    geom_abline(slope=-1, intercept=31, linetype=4) +
    scale_x_discrete(breaks=c(-30,-25,-20,-15,-10,-5,0,5,10,15,20,25,30), drop=FALSE)
)

```

We see a significantly larger effect size for the reversion of increases
in predicted wind speeds than for decreases:

```{r wind_speed_autocorr_lm}
wind_speed_autocorr <- wind_speed_autocorr %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0))

wind_speed_lm <- lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data=wind_speed_autocorr)
summary(wind_speed_lm)
```

{{< pagebreak >}} 

#### By year

It appears that there is no significant change in autocorrelation
patterns over the years:

```{r wind_speed_autocorr_year, warning=FALSE}
#| fig-cap: Changes in predicted wind speed *vs.* final prediction by year
#| fig-width: 10
#| fig-height: 10
wind_speed_autocorr_year <- lines %>%
  filter(variable=="wind_speed") %>%
  filter(previous <= 30, current <= 30, final <= 30) %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(year, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(wind_speed_autocorr_year, aes(x=factor(change_from_previous, levels=-30:30), y=change_to_final, weight=count)) +
    facet_wrap(~year) +
    geom_boxplot(outliers = FALSE) +
    theme_bw() +
    labs(
      title="Changes in Predicted Wind Speed vs. Final Prediction",
      x="Change in predicted wind speed, knots",
         y="Change from prediction to final prediction, knots") +
    geom_abline(slope=-1, intercept=31, linetype=4) +
    scale_x_discrete(breaks=c(-30,-20,-10,0,10,20,30), drop=FALSE)
)
```

{{< pagebreak >}} 

##### By aerodrome

We break down the tendency of changes in predicted wind speed to revert
by aerodrome. We see some geographic clusters, though their meaning is
not immediately obvious.

```{r wind_speed_autocorr_aerodrome_increase}
#| fig-cap: Reversion of increases in predicted wind speed by aerodrome
#| fig-width: 5
#| fig-height: 3

wind_speed_autocorr_aerodrome <- lines %>%
  filter(variable=="wind_speed") %>%
  filter(previous <= 30, current <= 30, final <= 30) %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(aerodrome, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(aerodrome) %>%
  mutate(fitAerodrome = list(lm(change_to_final ~ change_increase + change_decrease + 0,weights = count,  data = data))) %>%
  reframe(tidy(fitAerodrome)) %>%
  left_join(stations, by=c("aerodrome")) %>%
  filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_speed_autocorr_aerodrome %>% filter(term=="change_increase"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Increases in Predicted Wind Speed", colour="Reversion")

```

```{r wind_speed_autocorr_aerodrome_decrease}
#| fig-cap: Reversion of decreases in predicted wind speed by aerodrome
#| fig-width: 5
#| fig-height: 3


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_speed_autocorr_aerodrome %>% filter(term=="change_decrease"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Decreases in Predicted Wind Speed", colour="Reversion")


```

{{< pagebreak >}} 

#### Reversion of predicted increases *vs.* decreases

We do not see much correlation between reversionary tendencies for
increases and decreases in predicted wind speed.

```{r wind_speed_autocorr_aerodrome_increase_decrease}
#| fig-cap: Reversion of predicted decrease *vs.* increase of wind speed by aerodrome

ggplot(
  wind_speed_autocorr_aerodrome %>%
    select(aerodrome, term, estimate) %>%
    pivot_wider(names_from = term, values_from = estimate),
  aes(x=-change_increase, y=-change_decrease, label=aerodrome)) +
  geom_text(size=I(2)) +
  theme_bw() +
  labs(title="Reversion of Predicted Decrease vs. Increase of Wind Speed by Aerodrome",
       x="Reversion of predicted increase",
       y="Reversion of predicted decrease")

```

{{< pagebreak >}} 

## Wind speed with gusts

### Summary statistics

#### Histogram

```{r load_wind_speed_gust}
  wind_speed_gust_hist <- lines %>% 
      filter(variable=="wind_speed_with_gust") %>%
      group_by(current) %>%
      summarize(count=sum(count)) %>%
      ungroup()
```

Wind speeds with gust are forecast at an average of
`r sprintf("%.1f", weighted.mean(wind_speed_gust_hist$current, wind_speed_gust_hist$count))`
knots.

We see an interesting distribution of wind speeds with gust with the
typical exponential decay interrupted between 13 and 25 knots, the
proceeding as expected from 25 knots to 70 knots, and ceasing there:

```{r wind_speed_gust_hist}
#| fig-cap: Histogram of wind speeds with gust
 print(
   ggplot(wind_speed_gust_hist, aes(x=current)) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Wind Speeds with Gust", x="Wind speed with gust, knots", y="Count") +
     coord_cartesian(xlim=c(0,50)) +
     theme_bw()
   )
```

{{< pagebreak >}} 

#### Extreme values

```{r wind_speed_gust_hist_log, warning=FALSE}
#| fig-cap: Histogram of wind speeds with gust, log scale
 print(
   ggplot(wind_speed_gust_hist %>% filter(current >= 10), aes(x=current)) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Wind Speeds with Gust", x="Wind speed with gust, knots", y="Count") +
     scale_y_log10() +
     theme_bw()
   )
```

{{< pagebreak >}} 

##### By aerodrome

The geographical distribution is as expected.

```{r wind_speed_gust_map}
#| fig-cap: Average wind forecast speed with gust by aerodrome
wind_speed_gust_avg <- lines %>% 
      filter(variable=="wind_speed_with_gust") %>%
      group_by(aerodrome) %>%
      summarize(current=weighted.mean(current, count)) %>%
      ungroup() %>%
      left_join(stations, by=c("aerodrome")) %>%
      filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_speed_gust_avg, input_names = c("longitude", "latitude")),
             aes(colour=current)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Average Wind Forecast Speed with Gust by Aerodrome", colour="Knots")
```

The windiest airports for winds including gusts, by prediction, are:

```{r wind_speed_gust_max_stations}
#| tbl-cap: Aerodromes with the highest predicted average wind speeds with gust
kable(head(
  wind_speed_gust_avg %>% 
  arrange(-current) %>% 
  rename(average_wind = current) %>% 
  select(aerodrome, name, average_wind)),
  col.names = c("Aerodrome", "Name", "Average wind with gust, kts"),
  digits = 1)
```

{{< pagebreak >}} 

### Autocorrelation

##### Overall

Reductions in predicted wind speeds do not tend to get revised, but
increases mostly get revised:

```{r wind_speed_gust_autocorr, warning=FALSE}
#| fig-cap: Changes in predicted wind speed *vs.* final prediction
wind_speed_gust_autocorr <- lines %>%
  filter(variable=="wind_speed_with_gust") %>%
  filter(previous <= 30, current <= 30, final <= 30) %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(wind_speed_gust_autocorr, aes(x=factor(change_from_previous, levels=-30:30), y=change_to_final, weight=count)) +
    geom_boxplot() +
    theme_bw() +
    labs(
      title="Changes in Predicted Wind Speed with Gust vs. Final Prediction",
      x="Change in predicted wind speed with gust, knots",
         y="Change from prediction to final value, knots") +
    geom_abline(slope=-1, intercept=31, linetype=4) +
    scale_x_discrete(breaks=c(-30,-25,-20,-15,-10,-5,0,5,10,15,20,25,30), drop=FALSE)
)

```

We see a significantly larger effect size for the reversion of increases
in predicted wind speeds than for decreases:

```{r wind_speed_gust_autocorr_lm}
wind_speed_gust_autocorr <- wind_speed_gust_autocorr %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0))

wind_speed_gust_lm <- lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data=wind_speed_gust_autocorr)
summary(wind_speed_gust_lm)
```

{{< pagebreak >}} 

#### By year

It appears that there is no significant change in autocorrelation
patterns over the years:

```{r wind_speed_gust_autocorr_year, warning=FALSE}
#| fig-cap: Changes in predicted wind speed with gust *vs.* final prediction by year
#| fig-width: 10
#| fig-height: 10
wind_speed_gust_autocorr_year <- lines %>%
  filter(variable=="wind_speed_with_gust") %>%
  filter(previous <= 30, current <= 30, final <= 30) %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(year, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(wind_speed_gust_autocorr_year, aes(x=factor(change_from_previous, levels=-30:30), y=change_to_final, weight=count)) +
    facet_wrap(~year) +
    geom_boxplot(outliers = FALSE) +
    theme_bw() +
    labs(
      title="Changes in Predicted Wind Speed with Gust vs. Final Prediction",
      x="Change in predicted wind speed with gust, knots",
         y="Change from prediction to final value, knots") +
    geom_abline(slope=-1, intercept=31, linetype=4) +
    scale_x_discrete(breaks=c(-30,-20,-10,0,10,20,30), drop=FALSE)
)
```

{{< pagebreak >}} 

##### By aerodrome

There are some regional clusters for reversionary tendencies in
predicted wind speed with gust, but their meaning is not immediately
obvious.

```{r wind_speed_gust_autocorr_aerodrome_increase}
#| fig-cap: Reversion of increases in predicted wind speed with gust by aerodrome
#| fig-width: 5
#| fig-height: 3

wind_speed_gust_autocorr_aerodrome <- lines %>%
  filter(variable=="wind_speed_with_gust") %>%
  filter(previous <= 30, current <= 30, final <= 30) %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(aerodrome, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(aerodrome) %>%
  mutate(fitAerodrome = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitAerodrome)) %>%
  left_join(stations, by=c("aerodrome")) %>%
  filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_speed_gust_autocorr_aerodrome %>% filter(term=="change_increase"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Increases in Predicted Wind Speed with Gust", colour="Reversion")

```

```{r wind_speed_gust_autocorr_aerodrome_decrease}
#| fig-cap: Reversion of decreases in predicted wind speed by aerodrome
#| fig-width: 5
#| fig-height: 3


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_speed_gust_autocorr_aerodrome %>% filter(term=="change_decrease"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Decreases in Predicted Wind Speed with Gust", colour="Reversion")


```

{{< pagebreak >}} 

#### Reversion of predicted increases *vs.* decreases

We do not see much correlation between reversionary tendencies for
increases and decreases in predicted wind speed with gust.

```{r wind_speed_gust_autocorr_aerodrome_increase_decrease}
#| fig-cap: Reversion of predicted decrease *vs.* increase of wind speed with gust by aerodrome

ggplot(
  wind_speed_gust_autocorr_aerodrome %>%
    select(aerodrome, term, estimate) %>%
    pivot_wider(names_from = term, values_from = estimate),
  aes(x=-change_increase, y=-change_decrease, label=aerodrome)) +
  geom_text(size=I(2)) +
  theme_bw() +
  labs(title="Reversion of Predicted Decrease vs. Increase of Wind Speed with Gust by Aerodrome",
       x="Reversion of predicted increase",
       y="Reversion of predicted decrease")

```

{{< pagebreak >}} 

## Wind speed directional

### Summary statistics

```{r load_wind_speed_directional}
  wind_speed_directional_hist <- lines %>% 
      filter(variable %in% c("wind_north", "wind_east")) %>%
      filter(!is.na(current)) %>%
      group_by(current) %>%
      summarize(count=sum(count)) %>%
      ungroup()
```

Northerly and easterly wind components are forecast at an average of
`r sprintf("%.1f", weighted.mean(abs(wind_speed_directional_hist$current), wind_speed_directional_hist$count))`
knots. Patterns are as for wind speed:

```{r wind_speed_directional_hist}
#| fig-cap: Histogram of wind speed components
 print(
   ggplot(wind_speed_directional_hist, aes(x=abs(current))) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Wind Speed Components", x="Wind speed component, knots", y="Count") +
     coord_cartesian(xlim=c(0,50)) +
     theme_bw()
   )
```

```{r wind_speed_directional_hist_log, warning=FALSE}
#| fig-cap: Histogram of wind speed components, log scale
 print(
   ggplot(wind_speed_directional_hist %>% filter(current >= 10), aes(x=current)) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Wind Speed Components", x="Wind speed component, knots", y="Count") +
     scale_y_log10() +
     theme_bw()
   )
```

{{< pagebreak >}} 

### Autocorrelation

##### Overall

Once we take wind direction into account and look at northerly and
easterly components of wind speed, the pattern we have seen above of a
distinction between increases and decreases in wind speed largely
disappears and becomes more symmetrical. This is to be expected as
directional wind speed has a sign.

```{r wind_speed_directional_autocorr, warning=FALSE}
#| fig-cap: Changes in predicted wind speed component *vs.* final prediction
wind_speed_directional_autocorr <- lines %>%
  filter(variable %in% c("wind_north", "wind_east")) %>%
  filter(abs(previous) <= 30 & abs(current) <= 30 & abs(final) <= 30) %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  filter(abs(change_from_previous) <= 30 & abs(change_to_final) <= 30 ) %>%
  group_by(change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(wind_speed_directional_autocorr, aes(x=factor(change_from_previous, levels=-30:30), y=change_to_final, weight=count)) +
    geom_boxplot() +
    theme_bw() +
    labs(
      title="Changes in Predicted Wind Speed Component vs. Final Prediction",
      x="Change in predicted wind speed component, knots",
         y="Change from prediction to final value, knots") +
    geom_abline(slope=-1, intercept=31, linetype=4) +
    scale_x_discrete(breaks=c(-30,-25,-20,-15,-10,-5,0,5,10,15,20,25,30), drop=FALSE)
)

```

Thus, our reversionary tendency also becomes weaker as we cannot
meaningfully distinguish increases and decreases when we take direction
into account:

```{r wind_speed_directional_autocorr_lm}

wind_speed_directional_lm <- lm(change_to_final ~ change_from_previous + 0, weights = count, data=wind_speed_directional_autocorr)
summary(wind_speed_directional_lm)
```

{{< pagebreak >}} 

## Gust Spread

### Summary statistics

#### Histogram

```{r load_wind_gust_spread}
  wind_gust_spread_hist <- lines %>% 
      filter(variable=="wind_gust_spread") %>%
      group_by(current) %>%
      summarize(count=sum(count)) %>%
      ungroup()
```

Gust spreads are forecast at an average of 
`r sprintf("%.1f", weighted.mean(wind_gust_spread_hist$current, wind_gust_spread_hist$count))`
knots. Of course, this is an understatement since gusts are only reported when they are significant.
For predictions including gust larger than zero, the mean gust spread is 
`r sprintf("%.1f", weighted.mean(wind_gust_spread_hist$current[wind_gust_spread_hist$current>0], wind_gust_spread_hist$count[wind_gust_spread_hist$current>0]))` knots.

The distribution is as follows:

```{r wind_gust_spread_hist}
#| fig-cap: Histogram of gust spreads
 print(
   ggplot(wind_gust_spread_hist, aes(x=current)) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Gust Spreads", x="Gust spread, knots", y="Count") +
     coord_cartesian(xlim=c(0,50)) +
     theme_bw()
   )
```

{{< pagebreak >}} 

#### Extreme values

Again, we see an exponential decline of the frequency of the prediction of extreme values:

```{r wind_gust_spread_hist_log, warning=FALSE}
#| fig-cap: Histogram of gust spread, log scale
 print(
   ggplot(wind_gust_spread_hist %>% filter(current >= 5), aes(x=current)) + 
     geom_histogram(aes(weight=count), binwidth = 1) +
     labs(title="Histogram of Gust Spread", x="Gust spread, knots", y="Count") +
     scale_y_log10() +
     theme_bw()
   )
```

{{< pagebreak >}} 

##### By aerodrome

The geographical distribution shows little predicted gust on the Pacific coast, other than in Alaska and Hawaii, and in the Southeast:

```{r wind_gust_spread_map}
#| fig-cap: Average forecast gust spread by aerodrome
wind_gust_spread_avg <- lines %>% 
      filter(variable=="wind_gust_spread") %>%
      group_by(aerodrome) %>%
      summarize(current=weighted.mean(current, count)) %>%
      ungroup() %>%
      left_join(stations, by=c("aerodrome")) %>%
      filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_gust_spread_avg, input_names = c("longitude", "latitude")),
             aes(colour=current)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Average Forecast Gust Spread by Aerodrome", colour="Knots")
```

The gustiest airports are:

```{r wind_gust_spread_max_stations}
#| tbl-cap: Aerodromes with the highest predicted average gust spread
kable(head(
  wind_gust_spread_avg %>% 
  arrange(-current) %>% 
  rename(average_wind = current) %>% 
  select(aerodrome, name, average_wind)),
  col.names = c("Aerodrome", "Name", "Average gust spread, knots"),
  digits = 1)
```

{{< pagebreak >}} 

### Autocorrelation

##### Overall

Reductions in predicted gust spreads do not tend to get revised, but
increases mostly get revised at least partially.

```{r wind_gust_spread_autocorr, warning=FALSE}
#| fig-cap: Changes in predicted gust spread *vs.* final prediction
wind_gust_spread_autocorr <- lines %>%
  filter(variable=="wind_gust_spread") %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(wind_gust_spread_autocorr, aes(x=factor(change_from_previous, levels=-25:25), y=change_to_final, weight=count)) +
    geom_boxplot() +
    theme_bw() +
    labs(
      title="Changes in Predicted Gust Spread vs. Final Prediction",
      x="Change in predicted gust spread, knots",
         y="Change from prediction to final value, knots") +
    geom_abline(slope=-1, intercept=26, linetype=4) +
    scale_x_discrete(breaks=c(-25,-20,-15,-10,-5,0,5,10,15,20,25), drop=FALSE)
)

```

We see a significantly larger effect size for the reversion of increases
in predicted gust spreads than for decreases:

```{r wind_gust_spread_autocorr_lm}
wind_gust_spread_autocorr <- wind_gust_spread_autocorr %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0))

wind_gust_spread_lm <- lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data=wind_gust_spread_autocorr)
summary(wind_gust_spread_lm)
```

{{< pagebreak >}} 

#### By year

It appears that there is no significant change in autocorrelation
patterns over the years:

```{r wind_gust_spread_autocorr_year, warning=FALSE}
#| fig-cap: Changes in predicted gust spread *vs.* final prediction by year
#| fig-width: 10
#| fig-height: 10
wind_gust_spread_autocorr_year <- lines %>%
  filter(variable=="wind_gust_spread") %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(year, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(wind_gust_spread_autocorr_year, aes(x=factor(change_from_previous, levels=-25:25), y=change_to_final, weight=count)) +
    facet_wrap(~year) +
    geom_boxplot(outliers = FALSE) +
    theme_bw() +
    labs(
      title="Changes in Predicted Gust Spread vs. Final Prediction",
      x="Change in predicted gust spread, knots",
         y="Change from prediction to final value, knots") +
    geom_abline(slope=-1, intercept=26, linetype=4) +
    scale_x_discrete(breaks=c(-20,-10,0,10,20), drop=FALSE)
)
```

{{< pagebreak >}} 

##### By aerodrome

There are some regional clusters for reversionary tendencies in
predicted gust spread, but their meaning is not immediately
obvious.

```{r wind_gust_spread_autocorr_aerodrome_increase}
#| fig-cap: Reversion of increases in predicted gust spread by aerodrome
#| fig-width: 5
#| fig-height: 3

wind_gust_spread_autocorr_aerodrome <- lines %>%
  filter(variable=="wind_gust_spread") %>%
  mutate(change_from_previous=current-previous, change_to_final=final-current) %>%
  group_by(aerodrome, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(aerodrome) %>%
  mutate(fitAerodrome = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitAerodrome)) %>%
  left_join(stations, by=c("aerodrome")) %>%
  filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_gust_spread_autocorr_aerodrome %>% filter(term=="change_increase"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Increases in Predicted Gust Spread", colour="Reversion")

```

```{r wind_gust_spread_autocorr_aerodrome_decrease}
#| fig-cap: Reversion of decreases in predicted gust spread by aerodrome
#| fig-width: 5
#| fig-height: 3


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(wind_gust_spread_autocorr_aerodrome %>% filter(term=="change_decrease"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Decreases in Predicted Gust Spread", colour="Reversion")


```

{{< pagebreak >}} 

#### Reversion of predicted increases *vs.* decreases

We see some correlation between reversionary tendencies for
increases and decreases in predicted gust spreads.

```{r wind_gust_spread_autocorr_aerodrome_increase_decrease}
#| fig-cap: Reversion of predicted decrease *vs.* increase of gust spread by aerodrome

ggplot(
  wind_gust_spread_autocorr_aerodrome %>%
    select(aerodrome, term, estimate) %>%
    pivot_wider(names_from = term, values_from = estimate),
  aes(x=-change_increase, y=-change_decrease, label=aerodrome)) +
  geom_text(size=I(2)) +
  theme_bw() +
  labs(title="Reversion of Predicted Decrease vs. Increase of Gust Spread by Aerodrome",
       x="Reversion of predicted increase",
       y="Reversion of predicted decrease")

```


{{< pagebreak >}} 

## Lowest cloud layer

### Summary statistics

```{r load_clouds_lowest}
  clouds_lowest_hist <- lines %>% 
      filter(variable == "clouds_lowest_base") %>%
      filter(!is.na(current)) %>%
      group_by(current) %>%
      summarize(count=sum(count)) %>%
      ungroup()
```

For the base of the lowest cloud layer, we see a mode for no clouds
below 18,000 feet, which we show as 18,000 even for clear skies. Below
that, we see a decline of prediction frequency with increasing altitude,
with peaks at the round numbers of 10,000 feet and 15,000 feet.

```{r clouds_lowest_hist}
#| fig-cap: Histogram of lowest cloud layer base
 print(
   ggplot(clouds_lowest_hist, aes(x=abs(current))) + 
     geom_histogram(aes(weight=count), breaks=(-1:18) * 1000 + 500) +
     labs(title="Histogram of Lowest Cloud Layer Base", x="Lowest cloud layer base, feet", y="Count") +
     theme_bw()
   )
```

In the geographic distribution, we are seeing a distinct cluster of few
low clouds in the sunny Southwest. We are showing the median instead of
the average since the top value of 18,000 that is also taken for clear
skies is an arbitrary choice.

```{r clouds_lowest_map}
#| fig-cap: Median lowest cloud layer base by aerodrome
clouds_lowest_median <- lines %>% 
      filter(variable=="clouds_lowest_base") %>%
      group_by(aerodrome) %>%
      summarize(current=weighted.median(current, count)) %>%
      ungroup() %>%
      left_join(stations, by=c("aerodrome")) %>%
      filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(clouds_lowest_median, input_names = c("longitude", "latitude")),
             aes(colour=current)) +
  scale_colour_gradientn(colours = topo.colors(30)) +
  labs(title = "Median Lowest Cloud Layer Base by Aerodrome", colour="Feet")
```

{{< pagebreak >}} 

### Autocorrelation

##### Overall

Since a change of a cloud layer from 10,000 feet to 9,500 feet clearly
is not the same as a change from 1,000 feet to 500 feet, we look at
changes in the squre root of the altitude of the lowest cloud layer,
taking clear skies or anything above 18,000 feet AGL as 18,000 feet.

Predicted changes in cloud layer on the median don't tend to get
revised, but if they do get revidsed it's most often a reversion,
whether for predicted increases or decreases:

```{r clouds_lowest_autocorr, warning=FALSE}
#| fig-cap: Changes in predicted lowest cloud layer *vs.* final prediction
clouds_lowest_autocorr <- lines %>%
  filter(variable=="clouds_lowest_base") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  group_by(change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(clouds_lowest_autocorr, aes(x=factor(round(change_from_previous,-1), levels=(-14:14)*10), y=change_to_final, weight=count)) +
    geom_boxplot() +
    theme_bw() +
    labs(
      title="Changes in Predicted Lowest Cloud Layer vs. Final Prediction",
      x="Change in predicted lowest cloud base, sqrt(feet)",
         y="Change from prediction to final value, sqrt(feet)") +
    geom_abline(slope=-0.1, intercept=2.1, linetype=4) +
    scale_x_discrete(breaks=c(-125,-100,-75,-50,-25,0,25,50,75,100,125), drop=FALSE)
)

```

We see similar effect sizes for the reversion of increases and decreases
of predicted lowest cloud layer:

```{r clouds_lowest_autocorr_lm}
clouds_lowest_autocorr <- clouds_lowest_autocorr %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0))

clouds_lowest_lm <- lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data=clouds_lowest_autocorr)
summary(clouds_lowest_lm)
```

{{< pagebreak >}} 

#### By year

It appears that there is no significant change in autocorrelation
patterns over the years:

```{r clouds_lowest_autocorr_year, warning=FALSE}
#| fig-cap: Changes in predicted lowest cloud layer *vs.* final prediction by year
#| fig-width: 10
#| fig-height: 10
clouds_lowest_autocorr_year <- lines %>%
  filter(variable=="clouds_lowest_base") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  group_by(year, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(clouds_lowest_autocorr_year, aes(x=factor(round(change_from_previous,-1), levels=(-14:14)*10), y=change_to_final, weight=count)) +
    facet_wrap(~year) +
    geom_boxplot(outliers = FALSE) +
    theme_bw() +
    labs(
      title="Changes in Predicted Lowest Cloud Layer vs. Final Prediction",
      x="Change in predicted lowest cloud base, sqrt(feet)",
         y="Change from prediction to final value, sqrt(feet)") +
    geom_abline(slope=-0.1, intercept=2.1, linetype=4) +
    scale_x_discrete(breaks=c(-125,-100,-75,-50,-25,0,25,50,75,100,125), drop=FALSE)
)
```

{{< pagebreak >}} 

##### By aerodrome

We break down the tendency of changes in predicted visibility to revert
by aerodrome. There in an interest West-to-East gradient in reversion of
increases:

```{r clouds_lowest_autocorr_aerodrome_increase}
#| fig-cap: Reversion of increases in lowest cloud layer by aerodrome
#| fig-width: 5
#| fig-height: 3

clouds_lowest_autocorr_aerodrome <- lines %>%
  filter(variable=="clouds_lowest_base") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  filter(change_from_previous!=0) %>%
  group_by(aerodrome, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(aerodrome) %>%
  mutate(fitAerodrome = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitAerodrome)) %>%
  left_join(stations, by=c("aerodrome")) %>%
  filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(clouds_lowest_autocorr_aerodrome %>% filter(term=="change_increase"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Increases in Predicted Lowest Cloud Layer", colour="Reversion")

```

For reversion of decreases, Florida and the Gulf Coast together with
Wyoming form an interesting cluster of lower tendency to revert:

```{r clouds_lowest_autocorr_aerodrome_decrease}
#| fig-cap: Reversion of decreases in predicted lowest cloud layer by aerodrome
#| fig-width: 5
#| fig-height: 3


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(clouds_lowest_autocorr_aerodrome %>% filter(term=="change_decrease"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Decreases in Predicted Lowest Cloud Layer", colour="Reversion")
```

{{< pagebreak >}} 

#### Reversion of predicted increases *vs.* decreases

It appears there is indeed an anticorrelation between reversionary
tendencies in changes to increases *vs.* decreases in predicted lowest
cloud layer.

```{r clouds_lowest_autocorr_aerodrome_increase_decrease}
#| fig-cap: Reversion of predicted decrease *vs.* increase of lowest cloud layer by aerodrome

ggplot(
  clouds_lowest_autocorr_aerodrome %>%
    select(aerodrome, term, estimate) %>%
    pivot_wider(names_from = term, values_from = estimate),
  aes(x=-change_increase, y=-change_decrease, label=aerodrome)) +
  geom_text(size=I(2)) +
  theme_bw() +
  labs(title="Reversion of Predicted Decrease vs. Increase of Lowest Cloud Layer by Aerodrome",
       x="Reversion of predicted increase",
       y="Reversion of predicted decrease")

```

{{< pagebreak >}} 

## Ceiling

### Summary statistics

```{r load_clouds_ceiling}
  clouds_ceiling_hist <- lines %>% 
      filter(variable == "clouds_ceiling") %>%
      filter(!is.na(current)) %>%
      group_by(current) %>%
      summarize(count=sum(count)) %>%
      ungroup()
```

For the ceiling, the pattern from the lowest cloud base repeats:

```{r clouds_ceiling_hist}
#| fig-cap: Histogram of ceilings
 print(
   ggplot(clouds_ceiling_hist, aes(x=abs(current))) + 
     geom_histogram(aes(weight=count), breaks=(-1:18) * 1000 + 500) +
     labs(title="Histogram of Ceilings", x="Ceiling, feet", y="Count") +
     theme_bw()
   )
```

```{r clouds_ceiling_map}
#| fig-cap: Median ceiling by aerodrome
clouds_ceiling_median <- lines %>% 
      filter(variable=="clouds_ceiling") %>%
      group_by(aerodrome) %>%
      summarize(current=weighted.median(current, count)) %>%
      ungroup() %>%
      left_join(stations, by=c("aerodrome")) %>%
      filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(clouds_ceiling_median, input_names = c("longitude", "latitude")),
             aes(colour=current)) +
  scale_colour_gradientn(colours = topo.colors(30)) +
  labs(title = "Median Ceiling by Aerodrome", colour="Feet")
```

{{< pagebreak >}} 

### Autocorrelation

##### Overall

Since a change of a cloud layer from 10,000 feet to 9,500 feet clearly
is not the same as a change from 1,000 feet to 500 feet, we look at
changes in the squre root of the altitude of the ceiling, taking clear
skies or anything above 18,000 feet AGL as 18,000 feet.

Predicted changes in ceiling on the median don't tend to get revised,
but if they do get revised it's most often a reversion, whether for
predicted increases or decreases:

```{r clouds_ceiling_autocorr, warning=FALSE}
#| fig-cap: Changes in predicted ceiling *vs.* final prediction
clouds_ceiling_autocorr <- lines %>%
  filter(variable=="clouds_ceiling") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  group_by(change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(clouds_ceiling_autocorr, aes(x=factor(round(change_from_previous,-1), levels=(-14:14)*10), y=change_to_final, weight=count)) +
    geom_boxplot() +
    theme_bw() +
    labs(
      title="Changes in Predicted Ceiling vs. Final Prediction",
      x="Change in predicted ceiling, sqrt(feet)",
      y="Change from prediction to final value, sqrt(feet)") +
    geom_abline(slope=-0.1, intercept=2.1, linetype=4) +
    scale_x_discrete(breaks=c(-125,-100,-75,-50,-25,0,25,50,75,100,125), drop=FALSE)
)

```

For the ceiling, different from the lowest layer, we see somewhat of a
tendency for decreases to revert more than increases do:

```{r clouds_ceiling_autocorr_lm}
clouds_ceiling_autocorr <- clouds_ceiling_autocorr %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0))

clouds_ceiling_lm <- lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data=clouds_ceiling_autocorr)
summary(clouds_ceiling_lm)
```

{{< pagebreak >}} 

#### By year

It appears that there is no significant change in autocorrelation
patterns over the years:

```{r clouds_ceiling_autocorr_year, warning=FALSE}
#| fig-cap: Changes in predicted ceiling *vs.* final prediction by year
#| fig-width: 10
#| fig-height: 10
clouds_ceiling_autocorr_year <- lines %>%
  filter(variable=="clouds_ceiling") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  group_by(year, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(clouds_ceiling_autocorr_year, aes(x=factor(round(change_from_previous,-1), levels=(-14:14)*10), y=change_to_final, weight=count)) +
    facet_wrap(~year) +
    geom_boxplot(outliers = FALSE) +
    theme_bw() +
    labs(
      title="Changes in Predicted Ceiling Cloud Layer vs. Final Prediction",
      x="Change in predicted ceiling cloud base, sqrt(feet)",
      y="Change from prediction to final value, sqrt(feet)") +
    geom_abline(slope=-0.1, intercept=2.1, linetype=4) +
    scale_x_discrete(breaks=c(-125,-100,-75,-50,-25,0,25,50,75,100,125), drop=FALSE)
)
```

{{< pagebreak >}} 

##### By aerodrome

We break down the tendency of changes in predicted ceiling to revert by
aerodrome. In Florida, metropolitan California, West Texas, and Oklahoma
we see clusters of an unusually low tendency of increases in predicted
ceilings to revert:

```{r clouds_ceiling_autocorr_aerodrome_increase}
#| fig-cap: Reversion of increases in predicted ceiling by aerodrome
#| fig-width: 5
#| fig-height: 3

clouds_ceiling_autocorr_aerodrome <- lines %>%
  filter(variable=="clouds_ceiling") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  filter(change_from_previous!=0) %>%
  group_by(aerodrome, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(aerodrome) %>%
  mutate(fitAerodrome = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitAerodrome)) %>%
  left_join(stations, by=c("aerodrome")) %>%
  filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(clouds_ceiling_autocorr_aerodrome %>% filter(term=="change_increase"), input_names = c("longitude", "latitude")),
          aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Increases in Predicted Ceiling", colour="Reversion")

```

For reversion of decreases, we see a particular tendency for reversion
in Dixieland and California:

```{r clouds_ceiling_autocorr_aerodrome_decrease}
#| fig-cap: Reversion of decreases in predicted ceiling by aerodrome
#| fig-width: 5
#| fig-height: 3


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(clouds_ceiling_autocorr_aerodrome %>% filter(term=="change_decrease"), input_names = c("longitude", "latitude")),
          aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Decreases in Predicted Ceiling", colour="Reversion")
```

{{< pagebreak >}} 

#### Reversion of predicted increases *vs.* decreases

It appears there is an anticorrelation between reversionary tendencies
in changes to increases *vs.* decreases in predicted ceiling.

```{r clouds_ceiling_autocorr_aerodrome_increase_decrease}
#| fig-cap: Reversion of predicted decrease *vs.* increase of ceiling by aerodrome

ggplot(
  clouds_ceiling_autocorr_aerodrome %>%
    select(aerodrome, term, estimate) %>%
    pivot_wider(names_from = term, values_from = estimate),
  aes(x=-change_increase, y=-change_decrease, label=aerodrome)) +
  geom_text(size=I(2)) +
  theme_bw() +
  labs(title="Reversion of Predicted Decrease vs. Increase of Ceiling by Aerodrome",
       x="Reversion of predicted increase",
       y="Reversion of predicted decrease")

```

{{< pagebreak >}} 

## Visibility

### Summary statistics

```{r load_visibility}
  visibility_hist <- lines %>% 
      filter(variable == "visibility") %>%
      filter(!is.na(current)) %>%
      group_by(current) %>%
      summarize(count=sum(count)) %>%
      ungroup()
```

For visibility, six statute miles or better is by far the most predicted
value:

```{r visibility_hist}
#| fig-cap: Histogram of visibility
 print(
   ggplot(visibility_hist, aes(x=abs(current))) + 
     geom_histogram(aes(weight=count), breaks = (-1:24) / 4 + 1/8) +
     labs(title="Histogram of Visibility", x="Visibility, statute miles", y="Count") +
     theme_bw()
   )
```

In the geographic distribution, we are seeing good visibility out West.

```{r visibility_map}
#| fig-cap: Mean visibility by aerodrome
visibility_avg <- lines %>% 
      filter(variable=="visibility") %>%
      group_by(aerodrome) %>%
      summarize(current=weighted.mean(current, count)) %>%
      ungroup() %>%
      left_join(stations, by=c("aerodrome")) %>%
      filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(visibility_avg, input_names = c("longitude", "latitude")),
             aes(colour=current)) +
  scale_colour_gradientn(colours = topo.colors(30)) +
  labs(title = "Mean Visibility by Aerodrome", colour="St. miles")
```

The airports with the best visibility, by prediction (keeping in mind
that the scale maxes out at 6, but not using the median since that would
be just 6 for most aerodromes), are:

```{r visibility_max_stations}
#| tbl-cap: Aerodromes with the highest predicted visibility

kable(head(
  visibility_avg %>% 
  arrange(-current) %>% 
  rename(average_wind = current) %>% 
  select(aerodrome, name, average_wind)),
  col.names = c("Aerodrome", "Name", "Average visibility, sm"),
  digits = 4)
```

The two airports in the contiguous United States with the lowest
predicted visibility are both directly on the Pacific coast:

```{r visibility_min_stations}
#| tbl-cap: Aerodromes with the lowest predicted visibility

kable(head(
  visibility_avg %>% 
  arrange(current) %>% 
  rename(average_wind = current) %>% 
  select(aerodrome, name, average_wind)),
  col.names = c("Aerodrome", "Name", "Average visibility, sm"),
  digits = 4)
```

{{< pagebreak >}} 

### Autocorrelation

##### Overall

Since a change of visibility from 5 miles to 4.5 miles clearly is not
the same as a change from 1 mile to 0.5 miles, we look at changes in the
squre root of visibility.

Improvements in predicted visibility do not tend to get revised, but
decreases mostly get revised:

```{r visibility_autocorr, warning=FALSE}
#| fig-cap: Changes in predicted visibility *vs.* final prediction
visibility_autocorr <- lines %>%
  filter(variable=="visibility") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  group_by(change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(visibility_autocorr, aes(x=factor(round(change_from_previous,1), levels=(-20:20)/10), y=change_to_final, weight=count)) +
    geom_boxplot() +
    theme_bw() +
    labs(
      title="Changes in Predicted Visibility vs. Final Prediction",
      x="Change in predicted visibility, sqrt(statute miles)",
         y="Change from prediction to final value, sqrt(statute miles)") +
    geom_abline(slope=-0.1, intercept=2.1, linetype=4) +
    scale_x_discrete(breaks=c(-2,-1,0,1,2), drop=FALSE)
)

```

We see a significantly larger effect size for the reversion of decreases
in predicted visbility than for increases:

```{r visbility_autocorr_lm}
visibility_autocorr <- visibility_autocorr %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0))

visibility_lm <- lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data=visibility_autocorr)
summary(visibility_lm)
```

{{< pagebreak >}} 

#### By year

It appears that there is no significant change in autocorrelation
patterns over the years:

```{r visibility_autocorr_year, warning=FALSE}
#| fig-cap: Changes in predicted visibility *vs.* final prediction by year
#| fig-width: 10
#| fig-height: 10
visibility_autocorr_year <- lines %>%
  filter(variable=="visibility") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  group_by(year, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop")


print(
  ggplot(visibility_autocorr_year, aes(x=factor(round(change_from_previous,1), levels=(-20:20)/10), y=change_to_final, weight=count)) +
    facet_wrap(~year) +
    geom_boxplot(outliers = FALSE) +
    theme_bw() +
    labs(
      title="Changes in Predicted Visibility vs. Final Prediction",
      x="Change in predicted visibility, sqrt(statute miles)",
         y="Change from prediction to final value, sqrt(statute miles)") +
    geom_abline(slope=-0.1, intercept=2.1, linetype=4) +
    scale_x_discrete(breaks=c(-2,-1,0,1,2), drop=FALSE)
)
```

{{< pagebreak >}} 

##### By aerodrome

We break down the tendency of changes in predicted visibility to revert
by aerodrome. Again, there are regional clusters whose meaning is not
immediately obvious.

```{r visibility_autocorr_aerodrome_increase}
#| fig-cap: Reversion of increases in predicted visibility by aerodrome
#| fig-width: 5
#| fig-height: 3

visibility_autocorr_aerodrome <- lines %>%
  filter(variable=="visibility") %>%
  mutate(change_from_previous=sqrt(current)-sqrt(previous), change_to_final=sqrt(final)-sqrt(current)) %>%
  filter(change_from_previous!=0) %>%
  group_by(aerodrome, change_from_previous, change_to_final) %>%
  summarise(count=sum(count), .groups="drop") %>%
  mutate(change_increase=pmax(change_from_previous, 0),
         change_decrease=pmin(change_from_previous, 0)) %>%
  nest_by(aerodrome) %>%
  mutate(fitAerodrome = list(lm(change_to_final ~ change_increase + change_decrease + 0, weights = count, data = data))) %>%
  reframe(tidy(fitAerodrome)) %>%
  left_join(stations, by=c("aerodrome")) %>%
  filter(substr(aerodrome, 1, 1)=="K" | substr(aerodrome, 1, 2)=="PA" | substr(aerodrome, 1, 2)=="PH") 

plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(visibility_autocorr_aerodrome %>% filter(term=="change_increase"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Increases in Predicted Visibility", colour="Reversion")

```

```{r visibility_autocorr_aerodrome_decrease}
#| fig-cap: Reversion of decreases in predicted visibility by aerodrome
#| fig-width: 5
#| fig-height: 3


plot_usmap(fill="grey") +
  geom_sf(data=usmap_transform(visibility_autocorr_aerodrome %>% filter(term=="change_decrease"), input_names = c("longitude", "latitude")),
             aes(colour=-estimate)) +
  scale_colour_gradientn(colours = heat.colors(10)) +
  labs(title = "Reversion of Decreases in Predicted Visibility", colour="Reversion")
```

{{< pagebreak >}} 

#### Reversion of predicted increases *vs.* decreases

For visibility, it appears there is indeed an anticorrelation between
reversionary tendencies in changes to increases *vs.* decreases in
predicted visibility.

```{r visibility_autocorr_aerodrome_increase_decrease}
#| fig-cap: Reversion of predicted decrease *vs.* increase of visibility by aerodrome

ggplot(
  visibility_autocorr_aerodrome %>%
    select(aerodrome, term, estimate) %>%
    pivot_wider(names_from = term, values_from = estimate),
  aes(x=-change_increase, y=-change_decrease, label=aerodrome)) +
  geom_text(size=I(2)) +
  theme_bw() +
  labs(title="Reversion of Predicted Decrease vs. Increase of Visibility by Aerodrome",
       x="Reversion of predicted increase",
       y="Reversion of predicted decrease")

```

{{< pagebreak >}} 

# References

::: {#refs}
:::
